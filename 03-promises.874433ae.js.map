{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAC9BC,EAAcF,SAASC,cAAc,gBACrCE,EAAYH,SAASC,cAAc,eACnCG,EAAcJ,SAASC,cAAc,iBA2B3C,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAlCPR,EAAKgB,iBAAiB,UAEtB,SAAkBC,GAGhB,GAFAA,EAAMC,iBAEFf,EAAWgB,MAAQ,GAAKd,EAAYc,OAAS,EAC/C,OAAOrB,EAAAsB,OAAOC,QAAQ,0CAOxB,IAJA,IAAIC,EAAQC,OAAOpB,EAAWgB,OACxBK,EAAOD,OAAOnB,EAAUe,OACxBM,EAASF,OAAOlB,EAAYc,OAEzBO,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDpB,EAAcoB,EAAUJ,GACrBK,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBV,EAAAsB,OAAOS,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE9DuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBV,EAAAsB,OAAOY,QAAQ,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE9Dc,GAASE,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('.form');\nconst delayInput =  document.querySelector(\"[name=delay]\");\nconst stepInput = document.querySelector(\"[name=step]\");\nconst amountInput = document.querySelector(\"[name=amount]\");\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  if (delayInput.value < 0 || amountInput.value <= 0) {\n    return Notify.warning(\"You written value which less than zero\");\n }\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","value","Notify","warning","delay1","Number","step","amount","position1","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.874433ae.js.map"}